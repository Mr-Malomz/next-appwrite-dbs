import Head from 'next/head';
import Image from 'next/image';
import { useState } from 'react';
import styles from '../styles/Home.module.css';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export default function Home() {
  const [imgSrc, setImgSrc] = useState(null);
  console.log(prisma);

  const handleChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const fileList = e.target.files;
      const fileArray = [];
      Object.keys(fileList).map((element) => {
        fileArray.push(URL.createObjectURL(fileList[element]));
      });
      setImgSrc(fileArray);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const form = e.currentTarget;
    const fileInput = Array.from(form.elements).find(
      ({ name }) => name === 'img'
    );
    const fileChildren = [];

    const formData = new FormData();

    formData.append('upload_preset', process.env.NEXT_PUBLIC_UPLOAD_PRESET);

    Object.keys(fileInput.files).map((element) => {
      fileChildren.push(fileInput.files[element]);
    });

    const request = () =>
      fileChildren.map((file) => {
        formData.append('file', file);
        fetch(
          `https://api.cloudinary.com/v1_1/${process.env.NEXT_PUBLIC_CLOUD_NAME}/image/upload`,
          {
            method: 'POST',
            body: formData,
          }
        );
      });

    Promise.all(request())
      .then((res) => {
        alert('File(s) Uploaded successsfully');
        setImgSrc(null);
      })
      .catch((e) => alert('Error uploading file'));
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Appwrite DBs</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <p className={styles.description}>Appwrite Multiple DBs</p>

        <form method='post' onSubmit={handleSubmit}>
          <fieldset className={styles.fieldset}>
            <label htmlFor='name' className={styles.label}>
              Name:
            </label>
            <input
              type='text'
              name='name'
              required
              className={styles.inputText}
              onChange={handleChange}
            />
          </fieldset>
          <fieldset className={styles.fieldset}>
            <label htmlFor='img' className={styles.label}>
              Select image:
            </label>
            <input
              type='file'
              name='img'
              accept='image/*'
              required
              multiple
              className={styles.fileUpload}
              onChange={handleChange}
            />
          </fieldset>
          <div className={styles.grid}></div>
          {imgSrc &&
            imgSrc.map((image, i) => (
              <Image
                key={i}
                src={image}
                height={64}
                width={64}
                alt='uploads'
                className={styles.img}
              />
            ))}
          <button className={styles.button}>Submit</button>
        </form>
      </main>
    </div>
  );
}
